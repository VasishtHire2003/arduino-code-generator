import React, { useState, useEffect } from 'react';

// Main App component
const App = () => {
    // State variables for managing application data and UI state
    const [selectedComponent, setSelectedComponent] = useState(''); // Stores the currently selected Arduino component
    const [description, setDescription] = useState(''); // Stores the user's description for the code
    const [generatedCode, setGeneratedCode] = useState(''); // Stores the Arduino code generated by the API
    const [isLoading, setIsLoading] = useState(false); // Indicates if an API call is in progress
    const [error, setError] = useState(null); // Stores any error messages from the API or application logic
    const [showCopySuccess, setShowCopySuccess] = useState(false); // Controls visibility of the "Copied!" message

    // Array of available Arduino components for the dropdown
    const arduinoComponents = [
        'LED',
        'DHT11 (Temperature/Humidity Sensor)',
        'PIR Sensor (Motion Sensor)',
        'Servo Motor',
        'Buzzer',
        'LCD Display',
        'Push Button',
        'Potentiometer'
    ];

    /**
     * Handles the generation of Arduino code by making an API call to the Netlify Function proxy.
     * Sets loading states, handles success, and manages error messages.
     */
    const handleGenerateCode = async () => {
        // Clear previous outputs and set loading state
        setGeneratedCode('');
        setError(null);
        setIsLoading(true);

        try {
            // Define the URL for your Netlify Function proxy.
            // This path corresponds to the `generate-arduino-code.js` file in your `netlify/functions` directory.
            const functionUrl = '/.netlify/functions/generate-arduino-code';

            // Prepare the payload to send to your Netlify Function.
            // The function will then use this data to construct the actual prompt for the Gemini API.
            const functionPayload = {
                selectedComponent,
                description,
                model: "gemini-2.0-flash" // You can pass the model name if you want flexibility
            };

            // Make the fetch call to your Netlify Function.
            const response = await fetch(functionUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(functionPayload)
            });

            // Check if the response from your Netlify Function was successful.
            if (!response.ok) {
                // If not successful, parse the error from the function's response if available,
                // otherwise, throw a generic error.
                const errorData = await response.json();
                throw new Error(errorData.error || `Netlify Function error: ${response.statusText}`);
            }

            // Parse the JSON response from your Netlify Function.
            // It's expected to contain a 'generatedCode' property.
            const result = await response.json();

            // Check if the function returned the 'generatedCode' property.
            if (result.generatedCode) {
                setGeneratedCode(result.generatedCode);
                setError(null); // Clear any previous error
            } else {
                // If 'generatedCode' is missing, set a specific error message.
                setError("No code received from the proxy function. Please try a different description.");
                setGeneratedCode("");
            }
        } catch (err) {
            // Catch and display any errors during the fetch operation or from the function's response.
            console.error("Error generating code via proxy:", err);
            setError(`Failed to generate code: ${err.message || 'An unknown error occurred.'}`);
            setGeneratedCode("");
        } finally {
            // Always set isLoading to false once the API call is complete (success or failure)
            setIsLoading(false);
        }
    };

    /**
     * Handles copying the generated code to the clipboard.
     * Uses document.execCommand('copy') for broader compatibility within iframes.
     */
    const handleCopyCode = () => {
        const codeElement = document.getElementById('generated-code-block');
        if (codeElement) {
            // Select the text content of the code block
            const selection = window.getSelection();
            const range = document.createRange();
            range.selectNodeContents(codeElement);
            selection.removeAllRanges();
            selection.addRange(range);

            try {
                // Execute the copy command
                document.execCommand('copy');
                setShowCopySuccess(true); // Show the "Copied!" message
                setTimeout(() => setShowCopySuccess(false), 2000); // Hide after 2 seconds
            } catch (err) {
                console.error('Failed to copy text: ', err);
                // Optionally, inform the user that copying failed
            } finally {
                // Deselect the text
                selection.removeAllRanges();
            }
        }
    };

    // Determine if the generate button should be disabled
    const isGenerateButtonDisabled = isLoading || !selectedComponent || !description.trim();

    return (
        <div className="min-h-screen bg-gray-900 text-gray-100 flex flex-col font-sans">
            {/* Header */}
            <header className="bg-indigo-900 text-purple-200 p-4 shadow-xl rounded-b-lg">
                <div className="container mx-auto text-center">
                    <h1 className="text-3xl font-extrabold tracking-wide">Arduino Code Forge</h1>
                </div>
            </header>

            {/* Main Content Area */}
            <main className="w-full max-w-full mx-auto p-6 flex-grow flex flex-col md:flex-row gap-8 py-8">
                {/* Input Panel */}
                <section className="bg-gray-800 p-6 rounded-xl shadow-xl md:w-1/2 w-full flex flex-col border border-gray-700">
                    <h2 className="text-2xl font-semibold mb-6 text-purple-300">Generate Code</h2>

                    {/* Component Selection Dropdown */}
                    <div className="mb-6">
                        <label htmlFor="component-select" className="block text-lg font-medium text-gray-200 mb-2">
                            Select Arduino Component:
                        </label>
                        <div className="relative">
                            <select
                                id="component-select"
                                value={selectedComponent}
                                onChange={(e) => setSelectedComponent(e.target.value)}
                                className="block w-full py-2 px-4 border border-gray-600 rounded-lg shadow-sm focus:ring-purple-500 focus:border-purple-500 bg-gray-700 text-gray-100 appearance-none pr-8 cursor-pointer transition-colors duration-200"
                            >
                                <option value="" disabled>Choose a component...</option>
                                {arduinoComponents.map((component, index) => (
                                    <option key={index} value={component}>
                                        {component}
                                    </option>
                                ))}
                            </select>
                            {/* Dropdown arrow icon */}
                            <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-3 text-gray-300">
                                <svg className="fill-current h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                    <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
                                </svg>
                            </div>
                        </div>
                    </div>

                    {/* Description Input Textarea */}
                    <div className="mb-8 flex-grow">
                        <label htmlFor="description-input" className="block text-lg font-medium text-gray-200 mb-2">
                            Describe what you want the code to do:
                        </label>
                        <textarea
                            id="description-input"
                            value={description}
                            onChange={(e) => setDescription(e.target.value)}
                            placeholder="e.g., 'Turn on the LED when a button is pressed', 'Read temperature every 5 seconds and print to serial', 'Control a servo motor with a potentiometer'."
                            rows="8"
                            className="block w-full p-4 border border-gray-600 rounded-lg shadow-sm focus:ring-purple-500 focus:border-purple-500 resize-y min-h-[120px] bg-gray-700 text-gray-100 transition-colors duration-200"
                        ></textarea>
                    </div>

                    {/* Generate Button */}
                    <button
                        onClick={handleGenerateCode}
                        disabled={isGenerateButtonDisabled}
                        className={`w-full py-3 px-6 rounded-xl font-semibold text-white transition duration-300 ease-in-out transform hover:scale-105 active:scale-95
                            ${isGenerateButtonDisabled
                                ? 'bg-indigo-400 cursor-not-allowed'
                                : 'bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 shadow-lg hover:shadow-xl'}`
                        }
                    >
                        {isLoading ? (
                            <div className="flex items-center justify-center">
                                <svg className="animate-spin h-5 w-5 mr-3 text-white" viewBox="0 0 24 24">
                                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                Generating...
                            </div>
                        ) : (
                            'Generate Code'
                        )}
                    </button>
                </section>

                {/* Output Panel */}
                <section className="bg-gray-800 p-6 rounded-xl shadow-xl md:w-1/2 w-full flex flex-col border border-gray-700">
                    <h2 className="text-2xl font-semibold mb-6 text-purple-300">Generated Code</h2>

                    {/* Conditional Loading Spinner */}
                    {isLoading && (
                        <div className="flex items-center justify-center h-full text-purple-500">
                            <svg className="animate-spin h-8 w-8 mr-3" viewBox="0 0 24 24">
                                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            <span className="text-lg">Generating code...</span>
                        </div>
                    )}

                    {/* Conditional Error Message */}
                    {error && (
                        <div className="bg-red-900 border border-red-700 text-red-300 px-4 py-3 rounded-lg mb-4" role="alert">
                            <p className="font-bold">Error!</p>
                            <p className="text-sm">{error}</p>
                        </div>
                    )}

                    {/* Generated Code Display */}
                    {!isLoading && !error && (
                        <div className="flex-grow relative">
                            {/* Pre-formatted code block */}
                            <pre className="bg-gray-950 text-lime-400 p-4 rounded-lg overflow-auto h-full text-sm leading-relaxed whitespace-pre-wrap font-mono">
                                <code id="generated-code-block">{generatedCode || 'Your generated Arduino code will appear here.'}</code>
                            </pre>
                            {/* Copy Button */}
                            {generatedCode && (
                                <button
                                    onClick={handleCopyCode}
                                    disabled={!generatedCode}
                                    className={`absolute top-4 right-4 bg-gray-700 hover:bg-gray-600 text-gray-200 py-1 px-3 rounded-md text-sm font-medium transition duration-200 ease-in-out
                                        ${!generatedCode ? 'opacity-50 cursor-not-allowed' : 'shadow-md'}`
                                    }
                                >
                                    {showCopySuccess ? 'Copied!' : 'Copy Code'}
                                </button>
                            )}
                        </div>
                    )}
                </section>
            </main>

            {/* Footer */}
            <footer className="bg-gray-950 text-gray-400 text-center p-4 rounded-t-lg">
                <div className="container mx-auto">
                    <p>&copy; 2025 Arduino Code Forge. All rights reserved.</p>
                </div>
            </footer>
        </div>
    );
};

export default App;
